//     Inherify.js
//     @author: Mickael Drymon
//
//     Copyright (c) 2015 mdrymon.
//     The MIT License (MIT)
!function(t){var o=t,r={factory:function(t){if("object"!=typeof t)throw new Error("Options must be an object");var r,n=t.construct||"Inherify_BClass",e=t.element,i=t.params,p=t.prototypes,s=o[t.extend];if(e&&"object"!=typeof e)throw new Error("Options.element must be an object");if(p&&"object"!=typeof p)throw new Error("Options.prototypes must be an object");if(n&&"string"!=typeof n)throw new Error("Options.construct must be a string or null");if(s&&"function"!=typeof s)throw new Error("Options.construct must be a string or null");var c=o[n]=function(t,o){if(t){"[object Array]"===Object.prototype.toString.call(o)&&(o=[]);for(r in t)t.hasOwnProperty(r)&&"init"!==r&&(this[r]=t[r]);"function"==typeof t.init&&t.init.apply(this,o)}};s&&(c.prototype=new s(e,i));for(r in p)"constructor"!==r&&p.hasOwnProperty(r)&&(c.prototype[r]=p[r]);return c.prototype.constructor=c,e?new c(e,i):void 0},base:function(t){return o[t].prototype}};t.Inherify=r}(this);
